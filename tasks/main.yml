- name: Create AMI
  ec2_ami:
    name: "{{ ec2_ami_name }}"
    instance_id: "{{ ec2.instances[0].id }}"
    region: "{{ aws_region }}"
    aws_access_key: "{{ aws_access_key }}"
    aws_secret_key: "{{ aws_secret_key }}"
    wait: yes
  register: ami

- name: Terminate instance
  ec2:
    instance_ids: "{{ ec2.instances[0].id }}"
    state: absent
    region: "{{ aws_region }}"
    aws_access_key: "{{ aws_access_key }}"
    aws_secret_key: "{{ aws_secret_key }}"

- name: Create autoscaling launch configuration
  ec2_lc:
    name: "{{ ec2_lc_name }}"
    image_id: "{{ ami.image_id }}"
    key_name: "{{ ec2_keypair }}"
    security_groups: "{{ ec2_lc_groups }}"
    instance_type: "{{ ec2_lc_instance_type }}"
    instance_profile_name: "{{ ec2_lc_instance_profile }}"
    region: "{{ aws_region }}"
    aws_access_key: "{{ aws_access_key }}"
    aws_secret_key: "{{ aws_secret_key }}"
  register: lc

- name: Create load balancer
  ec2_elb_lb:
    name: "{{ ec2_elb_name }}"
    subnets: "{{ ec2_elb_subnets }}"
    scheme: internal
    connection_draining_timeout: 60
    listeners: "{{ ec2_elb_listeners }}"
    health_check:
      ping_protocol: http
      ping_port: 8090
      ping_path: /health
      response_timeout: 5
      interval: 30
      unhealthy_threshold: 2
      healthy_threshold: 2
    state: present
    region: "{{ aws_region }}"
    aws_access_key: "{{ aws_access_key }}"
    aws_secret_key: "{{ aws_secret_key }}"
  when: ec2_elb_create and ec2_elb_name is defined and ec2_elb_name

- name: Create autoscaling group
  ec2_asg:
    name: "{{ ec2_asg_name }}"
    launch_config_name: "{{ lc.name }}"
    vpc_zone_identifier: "{{ ec2_asg_subnets }}"
    availability_zones: "{{ ec2_asg_availability_zones }}"
    load_balancers: "{{ ec2_asg_load_balancers }}"
    wait_timeout: "{{ ec2_asg_wait_timeout }}"
    health_check_type: "{{ ec2_asg_health_check_type }}"
    replace_all_instances: yes
    min_size: "{{ ec2_asg_capacity_minimum }}"
    max_size: "{{ ec2_asg_capacity_maximum }}"
    desired_capacity: "{{ ec2_asg_capacity_desired }}"
    tags: "{{ ec2_asg_tags }}"
    region: "{{ aws_region }}"
    aws_access_key: "{{ aws_access_key }}"
    aws_secret_key: "{{ aws_secret_key }}"

- name: Find all launch configurations
  ec2_lc_find:
    name_regex: "{{ ec2_base_name }}-*"
    region: "{{ aws_region }}"
    aws_access_key: "{{ aws_access_key }}"
    aws_secret_key: "{{ aws_secret_key }}"
  register: lcs
  when: ec2_base_name is defined

- name: Remove old launch configurations
  ec2_lc:
    name: "{{ item.name }}"
    state: absent
    region: "{{ aws_region }}"
    aws_access_key: "{{ aws_access_key }}"
    aws_secret_key: "{{ aws_secret_key }}"
  with_items: "{{ lcs.results[:-5] }}"
  when: ec2_base_name is defined

- name: Find all AMIs
  ec2_ami_find:
    owner: self
    name: "{{ ec2_base_name }}-*"
    sort: name
    region: "{{ aws_region }}"
    aws_access_key: "{{ aws_access_key }}"
    aws_secret_key: "{{ aws_secret_key }}"
  register: amis
  when: ec2_base_name is defined

- name: Remove old AMIs
  ec2_ami:
    image_id: "{{ item.ami_id }}"
    delete_snapshot: yes
    state: absent
    region: "{{ aws_region }}"
    aws_access_key: "{{ aws_access_key }}"
    aws_secret_key: "{{ aws_secret_key }}"
  with_items: "{{ amis.results[:-5] }}"
  when: ec2_base_name is defined
