- name: Shut down instance
  ec2:
    instance_id: "{{ ec2.instances[0].id }}"
    state: stopped
    wait: yes
    region: "{{ aws_region }}"
    aws_access_key: "{{ aws_access_key }}"
    aws_secret_key: "{{ aws_secret_key }}"

- name: Create AMI
  ec2_ami:
    name: "{{ ec2_ami_name }}"
    instance_id: "{{ ec2.instances[0].id }}"
    no_reboot: yes
    wait: yes
    region: "{{ aws_region }}"
    aws_access_key: "{{ aws_access_key }}"
    aws_secret_key: "{{ aws_secret_key }}"
  register: ami

- name: Terminate instance
  ec2:
    instance_ids: "{{ ec2.instances[0].id }}"
    state: absent
    region: "{{ aws_region }}"
    aws_access_key: "{{ aws_access_key }}"
    aws_secret_key: "{{ aws_secret_key }}"

- name: Create autoscaling launch configuration
  ec2_lc:
    name: "{{ ec2_lc_name }}"
    image_id: "{{ ami.image_id }}"
    key_name: "{{ ec2_keypair }}"
    security_groups: "{{ ec2_lc_groups }}"
    instance_type: "{{ ec2_lc_instance_type }}"
    instance_profile_name: "{{ ec2_lc_instance_profile }}"
    instance_monitoring: "{{ ec2_lc_detailed_monitoring }}"
    region: "{{ aws_region }}"
    aws_access_key: "{{ aws_access_key }}"
    aws_secret_key: "{{ aws_secret_key }}"
  register: lc

- name: Create target group
  elb_target_group:
    name: "{{ ec2_tg_name }}"
    vpc_id: "{{ aws_vpc_id }}"
    protocol: http
    port: 8080
    state: present
    modify_targets: no
    health_check_protocol: http
    health_check_port: 8090
    health_check_interval: 30
    health_check_timeout: 10
    health_check_path: "{{ ec2_elb_health_check_path }}"
    healthy_threshold_count: 2
    unhealthy_threshold_count: 2
    deregistration_delay_timeout: 60
    region: "{{ aws_region }}"
    aws_access_key: "{{ aws_access_key }}"
    aws_secret_key: "{{ aws_secret_key }}"
  register: tg

- name: Create load balancer
  elb_application_lb:
    name: "{{ ec2_elb_name }}"
    subnets: "{{ ec2_elb_subnets }}"
    scheme: internal
    listeners: "{{ ec2_elb_listeners }}"
    security_groups: "{{ ec2_elb_security_groups }}"
    state: present
    region: "{{ aws_region }}"
    aws_access_key: "{{ aws_access_key }}"
    aws_secret_key: "{{ aws_secret_key }}"
  when: ec2_elb_create and ec2_elb_name is defined and ec2_elb_name

- name: Create autoscaling group
  ec2_asg:
    name: "{{ ec2_asg_name }}"
    launch_config_name: "{{ lc.name }}"
    vpc_zone_identifier: "{{ ec2_asg_subnets }}"
    availability_zones: "{{ ec2_asg_availability_zones }}"
    target_group_arns: "{{ tg.target_group_arn }}"
    wait_timeout: "{{ ec2_asg_wait_timeout }}"
    health_check_type: "{{ ec2_asg_health_check_type }}"
    health_check_period: 30
    replace_all_instances: yes
    min_size: "{{ ec2_asg_capacity_minimum }}"
    max_size: "{{ ec2_asg_capacity_maximum }}"
    desired_capacity: "{{ ec2_asg_capacity_desired }}"
    tags: "{{ ec2_asg_tags }}"
    region: "{{ aws_region }}"
    aws_access_key: "{{ aws_access_key }}"
    aws_secret_key: "{{ aws_secret_key }}"
  register: asg

- name: Create scaling up policy
  ec2_scaling_policy:
    name: up
    asg_name: "{{ asg.auto_scaling_group_name }}"
    adjustment_type: ChangeInCapacity
    scaling_adjustment: +1
    region: "{{ aws_region }}"
    aws_access_key: "{{ aws_access_key }}"
    aws_secret_key: "{{ aws_secret_key }}"

- name: Create scaling down policy
  ec2_scaling_policy:
    name: down
    asg_name: "{{ asg.auto_scaling_group_name }}"
    adjustment_type: ChangeInCapacity
    scaling_adjustment: -1
    region: "{{ aws_region }}"
    aws_access_key: "{{ aws_access_key }}"
    aws_secret_key: "{{ aws_secret_key }}"

- name: Find all launch configurations
  ec2_lc_find:
    name_regex: "{{ ec2_base_name }}-\\d+"
    region: "{{ aws_region }}"
    aws_access_key: "{{ aws_access_key }}"
    aws_secret_key: "{{ aws_secret_key }}"
  register: lcs
  when: ec2_base_name is defined

- name: Remove old launch configurations
  ec2_lc:
    name: "{{ item.name }}"
    state: absent
    region: "{{ aws_region }}"
    aws_access_key: "{{ aws_access_key }}"
    aws_secret_key: "{{ aws_secret_key }}"
  with_items: "{{ lcs.results[:-5] }}"
  when: ec2_base_name is defined

- name: Find all AMIs
  ec2_ami_facts:
    owner: self
    filters:
      name: "{{ ec2_base_name }}-\\\\d+"
    region: "{{ aws_region }}"
    aws_access_key: "{{ aws_access_key }}"
    aws_secret_key: "{{ aws_secret_key }}"
  register: amis
  when: ec2_base_name is defined

- name: Remove old AMIs
  ec2_ami:
    image_id: "{{ item.image_id }}"
    delete_snapshot: yes
    state: absent
    region: "{{ aws_region }}"
    aws_access_key: "{{ aws_access_key }}"
    aws_secret_key: "{{ aws_secret_key }}"
  with_items: "{{ amis.images[:-5] }}"
  when: ec2_base_name is defined
